{"abi":[{"type":"function","name":"royaltyInfo","inputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"},{"name":"salePrice","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"receiver","type":"address","internalType":"address"},{"name":"royaltyAmount","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"supportsInterface","inputs":[{"name":"interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"royaltyInfo(uint256,uint256)":"2a55205a","supportsInterface(bytes4)":"01ffc9a7"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the NFT Royalty Standard. A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal support for royalty payments across all NFT marketplaces and ecosystem participants.\",\"kind\":\"dev\",\"methods\":{\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"modules/openzeppelin-contracts/contracts/interfaces/IERC2981.sol\":\"IERC2981\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/=modules/openzeppelin-contracts/\",\":@openzeppelin/contracts/=modules/openzeppelin-contracts/contracts/\",\":ds-test/=modules/forge-std/lib/ds-test/src/\",\":erc4626-tests/=modules/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=modules/forge-std/src/\",\":halmos-cheatcodes/=modules/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=modules/seadrop/lib/openzeppelin-contracts-upgradeable/contracts/\",\":openzeppelin-contracts/=modules/seadrop/lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"modules/openzeppelin-contracts/contracts/interfaces/IERC2981.sol\":{\"keccak256\":\"0x89b84f7b1b2d6c294cd6b9a9f661c1cfb1b9b10ca7bac5b3445850a8ce96dcf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://44f961aefa43a50c94d8b68e749235b2cf3bd1de18bf6f2e5e1c0fd9a59e06ea\",\"dweb:/ipfs/QmNzd2bnJidavPtt2hQ1em387T6W37n3kDx8WrneCZozxV\"]},\"modules/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e\",\"dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"salePrice","type":"uint256"}],"stateMutability":"view","type":"function","name":"royaltyInfo","outputs":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"royaltyAmount","type":"uint256"}]},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"stateMutability":"view","type":"function","name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"royaltyInfo(uint256,uint256)":{"details":"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/=modules/openzeppelin-contracts/","@openzeppelin/contracts/=modules/openzeppelin-contracts/contracts/","ds-test/=modules/forge-std/lib/ds-test/src/","erc4626-tests/=modules/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=modules/forge-std/src/","halmos-cheatcodes/=modules/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=modules/seadrop/lib/openzeppelin-contracts-upgradeable/contracts/","openzeppelin-contracts/=modules/seadrop/lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"modules/openzeppelin-contracts/contracts/interfaces/IERC2981.sol":"IERC2981"},"evmVersion":"paris","libraries":{}},"sources":{"modules/openzeppelin-contracts/contracts/interfaces/IERC2981.sol":{"keccak256":"0x89b84f7b1b2d6c294cd6b9a9f661c1cfb1b9b10ca7bac5b3445850a8ce96dcf1","urls":["bzz-raw://44f961aefa43a50c94d8b68e749235b2cf3bd1de18bf6f2e5e1c0fd9a59e06ea","dweb:/ipfs/QmNzd2bnJidavPtt2hQ1em387T6W37n3kDx8WrneCZozxV"],"license":"MIT"},"modules/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c","urls":["bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e","dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"modules/openzeppelin-contracts/contracts/interfaces/IERC2981.sol","id":43082,"exportedSymbols":{"IERC165":[47962],"IERC2981":[43081]},"nodeType":"SourceUnit","src":"107:765:45","nodes":[{"id":43063,"nodeType":"PragmaDirective","src":"107:24:45","nodes":[],"literals":["solidity","^","0.8",".20"]},{"id":43065,"nodeType":"ImportDirective","src":"133:59:45","nodes":[],"absolutePath":"modules/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol","file":"../utils/introspection/IERC165.sol","nameLocation":"-1:-1:-1","scope":43082,"sourceUnit":47963,"symbolAliases":[{"foreign":{"id":43064,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47962,"src":"141:7:45","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":43081,"nodeType":"ContractDefinition","src":"454:417:45","nodes":[{"id":43080,"nodeType":"FunctionDefinition","src":"726:143:45","nodes":[],"documentation":{"id":43069,"nodeType":"StructuredDocumentation","src":"490:231:45","text":" @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n exchange. The royalty amount is denominated and should be paid in that same unit of exchange."},"functionSelector":"2a55205a","implemented":false,"kind":"function","modifiers":[],"name":"royaltyInfo","nameLocation":"735:11:45","parameters":{"id":43074,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43071,"mutability":"mutable","name":"tokenId","nameLocation":"764:7:45","nodeType":"VariableDeclaration","scope":43080,"src":"756:15:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43070,"name":"uint256","nodeType":"ElementaryTypeName","src":"756:7:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":43073,"mutability":"mutable","name":"salePrice","nameLocation":"789:9:45","nodeType":"VariableDeclaration","scope":43080,"src":"781:17:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43072,"name":"uint256","nodeType":"ElementaryTypeName","src":"781:7:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"746:58:45"},"returnParameters":{"id":43079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43076,"mutability":"mutable","name":"receiver","nameLocation":"836:8:45","nodeType":"VariableDeclaration","scope":43080,"src":"828:16:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":43075,"name":"address","nodeType":"ElementaryTypeName","src":"828:7:45","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":43078,"mutability":"mutable","name":"royaltyAmount","nameLocation":"854:13:45","nodeType":"VariableDeclaration","scope":43080,"src":"846:21:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":43077,"name":"uint256","nodeType":"ElementaryTypeName","src":"846:7:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"827:41:45"},"scope":43081,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":43067,"name":"IERC165","nameLocations":["476:7:45"],"nodeType":"IdentifierPath","referencedDeclaration":47962,"src":"476:7:45"},"id":43068,"nodeType":"InheritanceSpecifier","src":"476:7:45"}],"canonicalName":"IERC2981","contractDependencies":[],"contractKind":"interface","documentation":{"id":43066,"nodeType":"StructuredDocumentation","src":"194:259:45","text":" @dev Interface for the NFT Royalty Standard.\n A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n support for royalty payments across all NFT marketplaces and ecosystem participants."},"fullyImplemented":false,"linearizedBaseContracts":[43081,47962],"name":"IERC2981","nameLocation":"464:8:45","scope":43082,"usedErrors":[],"usedEvents":[]}],"license":"MIT"},"id":45}