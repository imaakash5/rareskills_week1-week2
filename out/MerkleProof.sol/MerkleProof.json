{"abi":[{"type":"error","name":"MerkleProofInvalidMultiproof","inputs":[]}],"bytecode":{"object":"0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bba6c411cfe7abd2ca22ff1b032357787b92984e88fce542324f166354559c5164736f6c63430008170033","sourceMap":"1353:22978:56:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bba6c411cfe7abd2ca22ff1b032357787b92984e88fce542324f166354559c5164736f6c63430008170033","sourceMap":"1353:22978:56:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MerkleProofInvalidMultiproof\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box. IMPORTANT: Consider memory side-effects when using custom hashing functions that access memory in an unsafe way. NOTE: This library supports proof verification for merkle trees built using custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving leaf inclusion in trees built using non-commutative hashing functions requires additional logic that is not supported by this library.\",\"errors\":{\"MerkleProofInvalidMultiproof()\":[{\"details\":\"The multiproof provided is not valid.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"modules/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/=modules/openzeppelin-contracts/\",\":@openzeppelin/contracts/=modules/openzeppelin-contracts/contracts/\",\":ds-test/=modules/forge-std/lib/ds-test/src/\",\":erc4626-tests/=modules/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=modules/forge-std/src/\",\":halmos-cheatcodes/=modules/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=modules/seadrop/lib/openzeppelin-contracts-upgradeable/contracts/\",\":openzeppelin-contracts/=modules/seadrop/lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"modules/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x4773a1161a3123e5e6af685852bf6c2ceed3140c83415b9bae839c6edaf2906b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://909710ce3b0828400258f1a474fc9c228d321d6003387ea8413f7c45878f7606\",\"dweb:/ipfs/QmPTjrA3jyLsvcuEySKSWR9QYfzwyUJC3izshUr8ctR3xL\"]},\"modules/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0xb3e8a283d67392c54dab24d246ae54d82c0097da9b6e666fdca43ae60ca17703\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ecaeb87792b17cf60fb7d871c1fc03ef9ab9bcad03011c4ebfeac3a78a315f51\",\"dweb:/ipfs/QmdK7WjpMAHvHCaWkBZUyXJXHXN5575j3HYk14MSy2EFTs\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"MerkleProofInvalidMultiproof"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/=modules/openzeppelin-contracts/","@openzeppelin/contracts/=modules/openzeppelin-contracts/contracts/","ds-test/=modules/forge-std/lib/ds-test/src/","erc4626-tests/=modules/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=modules/forge-std/src/","halmos-cheatcodes/=modules/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=modules/seadrop/lib/openzeppelin-contracts-upgradeable/contracts/","openzeppelin-contracts/=modules/seadrop/lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"modules/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol":"MerkleProof"},"evmVersion":"paris","libraries":{}},"sources":{"modules/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol":{"keccak256":"0x4773a1161a3123e5e6af685852bf6c2ceed3140c83415b9bae839c6edaf2906b","urls":["bzz-raw://909710ce3b0828400258f1a474fc9c228d321d6003387ea8413f7c45878f7606","dweb:/ipfs/QmPTjrA3jyLsvcuEySKSWR9QYfzwyUJC3izshUr8ctR3xL"],"license":"MIT"},"modules/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol":{"keccak256":"0xb3e8a283d67392c54dab24d246ae54d82c0097da9b6e666fdca43ae60ca17703","urls":["bzz-raw://ecaeb87792b17cf60fb7d871c1fc03ef9ab9bcad03011c4ebfeac3a78a315f51","dweb:/ipfs/QmdK7WjpMAHvHCaWkBZUyXJXHXN5575j3HYk14MSy2EFTs"],"license":"MIT"}},"version":1},"id":56}